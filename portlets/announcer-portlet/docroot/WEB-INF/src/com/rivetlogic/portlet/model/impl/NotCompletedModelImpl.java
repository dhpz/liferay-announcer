/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rivetlogic.portlet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.rivetlogic.portlet.model.NotCompleted;
import com.rivetlogic.portlet.model.NotCompletedModel;
import com.rivetlogic.portlet.model.NotCompletedSoap;
import com.rivetlogic.portlet.service.persistence.NotCompletedPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NotCompleted service. Represents a row
 * in the &quot;rivetlogic_ann_NotCompleted&quot; database table, with each
 * column mapped to a property of this class.
 * 
 * <p>
 * This implementation and its corresponding interface
 * {@link com.rivetlogic.portlet.model.NotCompletedModel} exist only as a
 * container for the default property accessors generated by ServiceBuilder.
 * Helper methods and all application logic should be put in
 * {@link NotCompletedImpl}.
 * </p>
 * 
 * @author charles.rodriguez
 * @see NotCompletedImpl
 * @see com.rivetlogic.portlet.model.NotCompleted
 * @see com.rivetlogic.portlet.model.NotCompletedModel
 * @generated
 */
@JSON(strict = true)
public class NotCompletedModelImpl extends BaseModelImpl<NotCompleted>
        implements NotCompletedModel {
    /*
     * NOTE FOR DEVELOPERS:
     * 
     * Never modify or reference this class directly. All methods that expect a
     * not completed model instance should use the {@link
     * com.rivetlogic.portlet.model.NotCompleted} interface instead.
     */
    public static final String TABLE_NAME = "rivetlogic_ann_NotCompleted";
    public static final Object[][] TABLE_COLUMNS = {
            { "USER_ID", Types.VARCHAR }, { "LAYOUT_PK", Types.VARCHAR },
            { "PANEL_CLOSE_DATE", Types.TIMESTAMP } };
    public static final String TABLE_SQL_CREATE = "create table rivetlogic_ann_NotCompleted (USER_ID VARCHAR(75) not null,LAYOUT_PK VARCHAR(75) not null,PANEL_CLOSE_DATE DATE null,primary key (USER_ID, LAYOUT_PK))";
    public static final String TABLE_SQL_DROP = "drop table rivetlogic_ann_NotCompleted";
    public static final String ORDER_BY_JPQL = " ORDER BY notCompleted.id.USER_ID ASC, notCompleted.id.LAYOUT_PK ASC";
    public static final String ORDER_BY_SQL = " ORDER BY rivetlogic_ann_NotCompleted.USER_ID ASC, rivetlogic_ann_NotCompleted.LAYOUT_PK ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil
            .getBoolean(
                    com.liferay.util.service.ServiceProps
                            .get("value.object.entity.cache.enabled.com.rivetlogic.portlet.model.NotCompleted"),
                    true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil
            .getBoolean(
                    com.liferay.util.service.ServiceProps
                            .get("value.object.finder.cache.enabled.com.rivetlogic.portlet.model.NotCompleted"),
                    true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil
            .getBoolean(
                    com.liferay.util.service.ServiceProps
                            .get("value.object.column.bitmask.enabled.com.rivetlogic.portlet.model.NotCompleted"),
                    true);
    public static long LAYOUT_PK_COLUMN_BITMASK = 1L;
    public static long USER_ID_COLUMN_BITMASK = 2L;

    /**
     * Converts the soap model instance into a normal model instance.
     * 
     * @param soapModel
     *            the soap model instance to convert
     * @return the normal model instance
     */
    public static NotCompleted toModel(NotCompletedSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        NotCompleted model = new NotCompletedImpl();

        model.setUSER_ID(soapModel.getUSER_ID());
        model.setLAYOUT_PK(soapModel.getLAYOUT_PK());
        model.setPANEL_CLOSE_DATE(soapModel.getPANEL_CLOSE_DATE());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     * 
     * @param soapModels
     *            the soap model instances to convert
     * @return the normal model instances
     */
    public static List<NotCompleted> toModels(NotCompletedSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<NotCompleted> models = new ArrayList<NotCompleted>(
                soapModels.length);

        for (NotCompletedSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public static final long LOCK_EXPIRATION_TIME = GetterUtil
            .getLong(com.liferay.util.service.ServiceProps
                    .get("lock.expiration.time.com.rivetlogic.portlet.model.NotCompleted"));

    public NotCompletedModelImpl() {
    }

    @Override
    public NotCompletedPK getPrimaryKey() {
        return new NotCompletedPK(_USER_ID, _LAYOUT_PK);
    }

    @Override
    public void setPrimaryKey(NotCompletedPK primaryKey) {
        setUSER_ID(primaryKey.USER_ID);
        setLAYOUT_PK(primaryKey.LAYOUT_PK);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new NotCompletedPK(_USER_ID, _LAYOUT_PK);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((NotCompletedPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return NotCompleted.class;
    }

    @Override
    public String getModelClassName() {
        return NotCompleted.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("USER_ID", getUSER_ID());
        attributes.put("LAYOUT_PK", getLAYOUT_PK());
        attributes.put("PANEL_CLOSE_DATE", getPANEL_CLOSE_DATE());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String USER_ID = (String) attributes.get("USER_ID");

        if (USER_ID != null) {
            setUSER_ID(USER_ID);
        }

        String LAYOUT_PK = (String) attributes.get("LAYOUT_PK");

        if (LAYOUT_PK != null) {
            setLAYOUT_PK(LAYOUT_PK);
        }

        Date PANEL_CLOSE_DATE = (Date) attributes.get("PANEL_CLOSE_DATE");

        if (PANEL_CLOSE_DATE != null) {
            setPANEL_CLOSE_DATE(PANEL_CLOSE_DATE);
        }
    }

    @JSON
    @Override
    public String getUSER_ID() {
        if (_USER_ID == null) {
            return StringPool.BLANK;
        } else {
            return _USER_ID;
        }
    }

    @Override
    public void setUSER_ID(String USER_ID) {
        _columnBitmask |= USER_ID_COLUMN_BITMASK;

        if (_originalUSER_ID == null) {
            _originalUSER_ID = _USER_ID;
        }

        _USER_ID = USER_ID;
    }

    public String getOriginalUSER_ID() {
        return GetterUtil.getString(_originalUSER_ID);
    }

    @JSON
    @Override
    public String getLAYOUT_PK() {
        if (_LAYOUT_PK == null) {
            return StringPool.BLANK;
        } else {
            return _LAYOUT_PK;
        }
    }

    @Override
    public void setLAYOUT_PK(String LAYOUT_PK) {
        _columnBitmask |= LAYOUT_PK_COLUMN_BITMASK;

        if (_originalLAYOUT_PK == null) {
            _originalLAYOUT_PK = _LAYOUT_PK;
        }

        _LAYOUT_PK = LAYOUT_PK;
    }

    public String getOriginalLAYOUT_PK() {
        return GetterUtil.getString(_originalLAYOUT_PK);
    }

    @JSON
    @Override
    public Date getPANEL_CLOSE_DATE() {
        return _PANEL_CLOSE_DATE;
    }

    @Override
    public void setPANEL_CLOSE_DATE(Date PANEL_CLOSE_DATE) {
        _PANEL_CLOSE_DATE = PANEL_CLOSE_DATE;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public NotCompleted toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (NotCompleted) ProxyUtil.newProxyInstance(
                    _classLoader, _escapedModelInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NotCompletedImpl notCompletedImpl = new NotCompletedImpl();

        notCompletedImpl.setUSER_ID(getUSER_ID());
        notCompletedImpl.setLAYOUT_PK(getLAYOUT_PK());
        notCompletedImpl.setPANEL_CLOSE_DATE(getPANEL_CLOSE_DATE());

        notCompletedImpl.resetOriginalValues();

        return notCompletedImpl;
    }

    @Override
    public int compareTo(NotCompleted notCompleted) {
        NotCompletedPK primaryKey = notCompleted.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof NotCompleted)) {
            return false;
        }

        NotCompleted notCompleted = (NotCompleted) obj;

        NotCompletedPK primaryKey = notCompleted.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        NotCompletedModelImpl notCompletedModelImpl = this;

        notCompletedModelImpl._originalUSER_ID = notCompletedModelImpl._USER_ID;

        notCompletedModelImpl._originalLAYOUT_PK = notCompletedModelImpl._LAYOUT_PK;

        notCompletedModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<NotCompleted> toCacheModel() {
        NotCompletedCacheModel notCompletedCacheModel = new NotCompletedCacheModel();

        notCompletedCacheModel.USER_ID = getUSER_ID();

        String USER_ID = notCompletedCacheModel.USER_ID;

        if ((USER_ID != null) && (USER_ID.length() == 0)) {
            notCompletedCacheModel.USER_ID = null;
        }

        notCompletedCacheModel.LAYOUT_PK = getLAYOUT_PK();

        String LAYOUT_PK = notCompletedCacheModel.LAYOUT_PK;

        if ((LAYOUT_PK != null) && (LAYOUT_PK.length() == 0)) {
            notCompletedCacheModel.LAYOUT_PK = null;
        }

        Date PANEL_CLOSE_DATE = getPANEL_CLOSE_DATE();

        if (PANEL_CLOSE_DATE != null) {
            notCompletedCacheModel.PANEL_CLOSE_DATE = PANEL_CLOSE_DATE
                    .getTime();
        } else {
            notCompletedCacheModel.PANEL_CLOSE_DATE = Long.MIN_VALUE;
        }

        return notCompletedCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{USER_ID=");
        sb.append(getUSER_ID());
        sb.append(", LAYOUT_PK=");
        sb.append(getLAYOUT_PK());
        sb.append(", PANEL_CLOSE_DATE=");
        sb.append(getPANEL_CLOSE_DATE());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.rivetlogic.portlet.model.NotCompleted");
        sb.append("</model-name>");

        sb.append("<column><column-name>USER_ID</column-name><column-value><![CDATA[");
        sb.append(getUSER_ID());
        sb.append("]]></column-value></column>");
        sb.append("<column><column-name>LAYOUT_PK</column-name><column-value><![CDATA[");
        sb.append(getLAYOUT_PK());
        sb.append("]]></column-value></column>");
        sb.append("<column><column-name>PANEL_CLOSE_DATE</column-name><column-value><![CDATA[");
        sb.append(getPANEL_CLOSE_DATE());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }

    private static ClassLoader _classLoader = NotCompleted.class
            .getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { NotCompleted.class };
    private String _USER_ID;
    private String _originalUSER_ID;
    private String _LAYOUT_PK;
    private String _originalLAYOUT_PK;
    private Date _PANEL_CLOSE_DATE;
    private long _columnBitmask;
    private NotCompleted _escapedModel;
}